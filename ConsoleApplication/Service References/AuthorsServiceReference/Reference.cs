//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApplication.AuthorsServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Author", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class Author : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AuthorsServiceReference.IAuthorService")]
    public interface IAuthorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorService/getAuthorsList", ReplyAction="http://tempuri.org/IAuthorService/getAuthorsListResponse")]
        ConsoleApplication.AuthorsServiceReference.Author[] getAuthorsList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorService/getAuthorsList", ReplyAction="http://tempuri.org/IAuthorService/getAuthorsListResponse")]
        System.Threading.Tasks.Task<ConsoleApplication.AuthorsServiceReference.Author[]> getAuthorsListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorService/addAuthor", ReplyAction="http://tempuri.org/IAuthorService/addAuthorResponse")]
        void addAuthor(ConsoleApplication.AuthorsServiceReference.Author author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorService/addAuthor", ReplyAction="http://tempuri.org/IAuthorService/addAuthorResponse")]
        System.Threading.Tasks.Task addAuthorAsync(ConsoleApplication.AuthorsServiceReference.Author author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorService/deleteAuthor", ReplyAction="http://tempuri.org/IAuthorService/deleteAuthorResponse")]
        void deleteAuthor(int authorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorService/deleteAuthor", ReplyAction="http://tempuri.org/IAuthorService/deleteAuthorResponse")]
        System.Threading.Tasks.Task deleteAuthorAsync(int authorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorService/isAuthorInDatabase", ReplyAction="http://tempuri.org/IAuthorService/isAuthorInDatabaseResponse")]
        bool isAuthorInDatabase(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorService/isAuthorInDatabase", ReplyAction="http://tempuri.org/IAuthorService/isAuthorInDatabaseResponse")]
        System.Threading.Tasks.Task<bool> isAuthorInDatabaseAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthorServiceChannel : ConsoleApplication.AuthorsServiceReference.IAuthorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthorServiceClient : System.ServiceModel.ClientBase<ConsoleApplication.AuthorsServiceReference.IAuthorService>, ConsoleApplication.AuthorsServiceReference.IAuthorService {
        
        public AuthorServiceClient() {
        }
        
        public AuthorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConsoleApplication.AuthorsServiceReference.Author[] getAuthorsList() {
            return base.Channel.getAuthorsList();
        }
        
        public System.Threading.Tasks.Task<ConsoleApplication.AuthorsServiceReference.Author[]> getAuthorsListAsync() {
            return base.Channel.getAuthorsListAsync();
        }
        
        public void addAuthor(ConsoleApplication.AuthorsServiceReference.Author author) {
            base.Channel.addAuthor(author);
        }
        
        public System.Threading.Tasks.Task addAuthorAsync(ConsoleApplication.AuthorsServiceReference.Author author) {
            return base.Channel.addAuthorAsync(author);
        }
        
        public void deleteAuthor(int authorID) {
            base.Channel.deleteAuthor(authorID);
        }
        
        public System.Threading.Tasks.Task deleteAuthorAsync(int authorID) {
            return base.Channel.deleteAuthorAsync(authorID);
        }
        
        public bool isAuthorInDatabase(string name) {
            return base.Channel.isAuthorInDatabase(name);
        }
        
        public System.Threading.Tasks.Task<bool> isAuthorInDatabaseAsync(string name) {
            return base.Channel.isAuthorInDatabaseAsync(name);
        }
    }
}
